version: '3.8'

services:
  # PostgreSQL Database (Not Required - Removed)
  # Note: PostgreSQL is not actually used in the application
  # The app only uses ChromaDB (vector), Neo4j (graph), and Redis (cache)

  # Neo4j Graph Database (Required for ML mode)
  neo4j:
    image: neo4j:latest
    environment:
      NEO4J_AUTH: neo4j/synthetica_password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p synthetica_password 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - ml-mode
      - full-mode

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - full-mode

  # Synthetica Backend - Demo Mode
  synthetica-backend-demo:
    build: .
    environment:
      DEMO_MODE: "true"
      DEBUG: "true"
      LOG_LEVEL: "INFO"
      API_HOST: "0.0.0.0"
      API_PORT: "8001"
      CHROMA_PERSIST_DIRECTORY: /app/chroma_db
    volumes:
      - ./chroma_db:/app/chroma_db
      - ./data:/app/data
    ports:
      - "8001:8001"
    command: ["uvicorn", "app.simple_demo:app", "--host", "0.0.0.0", "--port", "8001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - demo-mode

  # Synthetica Backend - ML Mode
  synthetica-backend-ml:
    build: .
    environment:
      ML_PIPELINE_ENABLED: "true"
      DEMO_MODE: "false"
      DEBUG: "true"
      LOG_LEVEL: "INFO"
      API_HOST: "0.0.0.0"
      API_PORT: "8001"
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: synthetica_password
      CHROMA_PERSIST_DIRECTORY: /app/chroma_db
      CHROMA_DB_PATH: /app/ml_pipeline/chroma_db_gene_mvp_new
    volumes:
      - ./chroma_db:/app/chroma_db
      - ./app/ml_pipeline:/app/ml_pipeline
      - ./data:/app/data
    ports:
      - "8001:8001"
    command: ["uvicorn", "app.main_ml:app", "--host", "0.0.0.0", "--port", "8001"]
    depends_on:
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - ml-mode

  # Synthetica Backend - Full Mode
  synthetica-backend-full:
    build: .
    env_file:
      - ./.env
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: synthetica_password
      REDIS_URL: redis://redis:6379
      CHROMA_PERSIST_DIRECTORY: /app/chroma_db
      CHROMA_DB_PATH: /app/ml_pipeline/chroma_db_gene_mvp_new
      ML_PIPELINE_ENABLED: "true"
      DEMO_MODE: "false"
    volumes:
      - ./chroma_db:/app/chroma_db
      - ./app/ml_pipeline:/app/ml_pipeline
      - ./data:/app/data
    ports:
      - "8000:8000"
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - full-mode

  # Synthetica Frontend
  synthetica-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_BASE_URL=http://localhost:8001
        - REACT_APP_API_BASE_URL_CONTAINER=http://synthetica-backend-demo:8001
        - REACT_APP_API_RESEARCH_GENERATE=/api/v1/research/generate
        - REACT_APP_API_RESEARCH_ASYNC=/api/v1/research/async
        - REACT_APP_API_RESEARCH_STATUS=/api/v1/research/status
        - REACT_APP_API_RESEARCH_RESULT=/api/v1/research/result
        - REACT_APP_API_RESEARCH_ENTITIES=/api/v1/research/entities
        - REACT_APP_API_RESEARCH_PATHS=/api/v1/research/paths
        - REACT_APP_FRONTEND_PORT=3000
        - REACT_APP_FRONTEND_HOST=localhost
        - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    depends_on:
      - synthetica-backend-demo
    profiles:
      - demo-mode

  # Synthetica Frontend - ML Mode
  synthetica-frontend-ml:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_BASE_URL=http://localhost:8001
        - REACT_APP_API_BASE_URL_CONTAINER=http://synthetica-backend-ml:8001
        - REACT_APP_API_RESEARCH_GENERATE=/api/v1/research/generate
        - REACT_APP_API_RESEARCH_ASYNC=/api/v1/research/async
        - REACT_APP_API_RESEARCH_STATUS=/api/v1/research/status
        - REACT_APP_API_RESEARCH_RESULT=/api/v1/research/result
        - REACT_APP_API_RESEARCH_ENTITIES=/api/v1/research/entities
        - REACT_APP_API_RESEARCH_PATHS=/api/v1/research/paths
        - REACT_APP_FRONTEND_PORT=3000
        - REACT_APP_FRONTEND_HOST=localhost
        - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    depends_on:
      - synthetica-backend-ml
    profiles:
      - ml-mode

  # Synthetica Frontend - Full Mode
  synthetica-frontend-full:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_BASE_URL=http://localhost:8000
        - REACT_APP_API_BASE_URL_CONTAINER=http://synthetica-backend-full:8000
        - REACT_APP_API_RESEARCH_GENERATE=/api/v1/research/generate
        - REACT_APP_API_RESEARCH_ASYNC=/api/v1/research/async
        - REACT_APP_API_RESEARCH_STATUS=/api/v1/research/status
        - REACT_APP_API_RESEARCH_RESULT=/api/v1/research/result
        - REACT_APP_API_RESEARCH_ENTITIES=/api/v1/research/entities
        - REACT_APP_API_RESEARCH_PATHS=/api/v1/research/paths
        - REACT_APP_FRONTEND_PORT=3000
        - REACT_APP_FRONTEND_HOST=localhost
        - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    depends_on:
      - synthetica-backend-full
    profiles:
      - full-mode

volumes:
  neo4j_data:
  neo4j_logs:
